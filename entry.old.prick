API:
	input on stack from top:
	target,
	length N,
	N ascii-encoded characters from "0123456789+-*/"
	return value on top of stack after termination

memory layout:
	0-2: tmp0, tmp1, tmp2
	3: target
	4: length of input N
	5: depth
	6: best fit
	7: addr of permutation counting
	8: addr of interpreter stacks
	9: second stack pointer
	10-N+9: permutation of input
	N+10-2N+9: permutation counting
	2N+10-N^2+3N+9: interpreter stacks
	N^2+3N+10 onwards: second stack

method:
	go through permutations of input interpretting them
	update the best fit on every possible intermediate value
	backtrack on stack/value underflow or division error

: comment


things from the wiki, somewhat adjusted : comment

#       : tmp0
# ++    : tmp1
# ++ ++ : tmp2
tmp0 ! tmp0 @ tmp0 @        : dup
tmp0 !                      : drop
tmp0 ! tmp1 ! tmp0 @ tmp1 @ : swap
tmp1 ! tmp0 ! tmp0 @ tmp1 @ tmp0 @    : over IS WRONG, NO DUP
tmp2 ! swap tmp2 @ swap     : rot

[ # ++ | ++ ]                                   : +
# swap # swap [ # ++ | swap drop dup ++ ] drop  : --
[ # ++ | -- ]                                   : -
tmp0 ! tmp1 ! # tmp1 @ tmp0 @ IS WRONG, SHOULD BE 0 INSTEAD OF 1
[ # ++ | dup tmp0 ! + tmp0 @ ] drop             : *
# tmp2 ! tmp1 ! tmp0 ! tmp0 @ tmp1 @ - ++ tmp0 @
[ dup | tmp1 @ - tmp2 @ ++ tmp2 ! ] drop tmp2 @ : / VERY INCORRECT, NOT FIXED

# ++ ++ ++ ++ ++ dup + *     : 0
0 ++                         : 1
0 ++ ++                      : 2
0 ++ ++ ++                   : 3
0 ++ ++ ++ ++                : 4
0 ++ ++ ++ ++ ++             : 5
0 ++ ++ ++ ++ ++ ++          : 6
0 ++ ++ ++ ++ ++ ++ ++       : 7
0 ++ ++ ++ ++ ++ ++ ++ ++    : 8
0 ++ ++ ++ ++ ++ ++ ++ ++ ++ : 9
# 2 1 3 7 : 2137


memory regions : comment

# 3 @ : target	# 4 @ : length	# 5 : depth
# 6 : best	# 7 @ : perm	# 8 @ : stack
# 9 : asp	# 1 0 : input

asp @ dup @ swap -- asp ! : aux> INCORRECT
asp @ ++ dup asp ! !               : >aux INCORRECT
asp @ @                          : aux@

# ++ 
: step

# ++ dup rot [ # ++ | >aux aux@ * aux> ++ ] drop : factorial

# 9 # 5 target - # 1 [ | drop # # ] : worst_fit

# 3 ! dup # 4 ! dup # 9 + # 7 ! dup over + # 1 0 + # 8 !
dup over * over + over + # 1 0 + asp !

input swap [ # ++ | >aux aux@ ! aux> ++ ]

worst_fit best ! # ++ deph !

length factorial # 2 * [ depth @ | step ]

best @
